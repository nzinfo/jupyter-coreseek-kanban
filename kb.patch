diff --git a/src/components/TaskBoardPanel.tsx b/src/components/TaskBoardPanel.tsx
index 99e5db0..ba5b32b 100644
--- a/src/components/TaskBoardPanel.tsx
+++ b/src/components/TaskBoardPanel.tsx
@@ -18,7 +18,7 @@ import { KanbanLayout } from './KanbanLayout';
 import { TaskBoardHeaderEditor } from './TaskBoardHeaderEditor';
 import { IEditorServices } from '@jupyterlab/codeeditor';
 import { YFile } from '@jupyter/ydoc';
-// import { KanbanModel } from '../model';
+import { KanbanModel } from '../model';
 import { DocumentRegistry } from '@jupyterlab/docregistry';
 
 /**
@@ -31,6 +31,12 @@ class TaskBoardHeader extends ReactWidget {
     this._tasklistVisible = true;
     this._editState = null;
     this._inputRef = React.createRef<HTMLInputElement>();
+    this._title = this.trans.__('Task Board');
+  }
+
+  setTitle(title: string) {
+    this._title = title;
+    this.update();
   }
 
   componentDidUpdate() {
@@ -66,7 +72,7 @@ class TaskBoardHeader extends ReactWidget {
           </div>
         ) : (
           <div className="jp-TaskBoard-title">
-            <h2 onClick={this._onClick}>{this.trans.__('Task Board')}</h2>
+            <h2 onClick={this._onClick}>{this._title}</h2>
 
           </div>
         )}
@@ -95,7 +101,7 @@ class TaskBoardHeader extends ReactWidget {
  
   private _startEdit = () => {
     this._editState = {
-      value: this.trans.__('Task Board')
+      value: this._title
     };
     this.update();
   };
@@ -156,6 +162,7 @@ class TaskBoardHeader extends ReactWidget {
   private _onHeaderClick: (() => void) | null = null;
   private _editState: { value: string } | null;
   private _inputRef: React.RefObject<HTMLInputElement>;
+  private _title: string;
 }
 
 /**
@@ -208,22 +215,12 @@ export class TaskBoardPanel extends SidePanel {
     this.trans = translator.load('jupyter-coreseek-kanban');
 
     // Store the model
-    // this._model = model;
+    this._model = model as KanbanModel;
     this._sharedModel = (model.sharedModel as YFile);
     
     // Set up shared model change handling
-    this._sharedModel.changed.connect((sender: YFile) => {
-      console.log('Shared model changed in TaskBoardPanel:', {
-        content: sender.getSource().slice(0, 50)
-      });
-      // 如果编辑器是打开的，更新其内容
-      if (this._headerEditor.isVisible) {
-        const currentContent = this._headerEditor.getContent();
-        const modelContent = sender.getSource();
-        if (currentContent !== modelContent) {
-          this._headerEditor.setContent(modelContent);
-        }
-      }
+    this._model.changed.connect(() => {
+      this._updateFromModel();
     });
 
     // Add header editor panel with the shared model
@@ -233,20 +230,8 @@ export class TaskBoardPanel extends SidePanel {
       sharedModel: this._sharedModel
     });
 
-    // Initialize shared model with default content if empty
-    //if (this._sharedModel.getSource().trim() === '') {
-    //  this._sharedModel.setSource('# Task Board\n\nThis is the task board description.');
-    //}
-
     // Set up collaboration awareness
     if (this._sharedModel.awareness) {
-      /*
-      this._sharedModel.awareness.setLocalStateField('user', {
-        name: 'User ' + Math.floor(Math.random() * 1000),
-        color: '#' + Math.floor(Math.random()*16777215).toString(16)
-      });
-      */
-      // Listen to awareness changes
       this._sharedModel.awareness.on('change', () => {
         const states = Array.from(this._sharedModel.awareness!.getStates().values());
         console.log('Active users:', states);
@@ -254,15 +239,14 @@ export class TaskBoardPanel extends SidePanel {
     }
 
     // Add header
-    const header = new TaskBoardHeader(this.trans);
-    header.setTasklistToggleCallback((visible) => {
+    this._task_header = new TaskBoardHeader(this.trans);
+    this._task_header.setTasklistToggleCallback((visible) => {
       const parent = this.parent;
       if (parent && parent instanceof KanbanLayout) {
         parent.toggleTaskList(visible);
       }
     });
-    header.setHeaderClickCallback(() => {
-      // 获取当前 model 的内容
+    this._task_header.setHeaderClickCallback(() => {
       const currentContent = this._sharedModel.getSource();
       console.log('Current model content:', currentContent);
 
@@ -270,30 +254,10 @@ export class TaskBoardPanel extends SidePanel {
       this._headerEditor.setContent(currentContent);
       this._headerEditor.show();
     });
-    this.header.addWidget(header);
-
-    // Add main content panel with toolbar
-    const contentPanel = new PanelWithToolbar();
-    contentPanel.addClass('jp-TaskBoard-section');
-    contentPanel.title.label = 'main';
-
-    // Add new task buttons to toolbar
-    contentPanel.toolbar.addItem(
-      'newTask',
-      new ToolbarButton({
-        icon: addIcon,
-        onClick: () => {
-          const currentContent = this._sharedModel.getSource();
-          this._sharedModel.setSource(currentContent + '\nhello');
-          console.log('Added hello to the model');
-        },
-        tooltip: this.trans.__('Add new task')
-      })
-    );
+    this.header.addWidget(this._task_header);
 
-    // Add task board content
-    contentPanel.addWidget(new TaskBoardContent(this.trans));
-    this.addWidget(contentPanel);
+    // Initial update from model
+    this._updateFromModel();
 
     // Set up save and revert handlers
     this._headerEditor.setOnSave(() => {
@@ -313,10 +277,87 @@ export class TaskBoardPanel extends SidePanel {
     });
   }
 
+  private _updateFromModel(): void {
+    const structure = this._model.structure;
+    if (!structure) {
+      return;
+    }
+
+    // Update title
+    this._task_header.setTitle(structure.title || this.trans.__('Task Board'));
+
+    // Remove all content panels
+    const widgets = [...this.widgets];
+    widgets.forEach(widget => {
+      if (widget instanceof PanelWithToolbar) {
+        widget.dispose();
+      }
+    });
+    this._sectionPanels = [];
+
+    // Create sections
+    structure.sections.forEach(section => {
+      const contentPanel = new PanelWithToolbar();
+      contentPanel.addClass('jp-TaskBoard-section');
+      contentPanel.title.label = section.title;
+
+      // Add new task button to toolbar
+      contentPanel.toolbar.addItem(
+        'newTask',
+        new ToolbarButton({
+          icon: addIcon,
+          onClick: () => {
+            const currentContent = this._sharedModel.getSource();
+            this._sharedModel.setSource(currentContent + '\n- New task');
+            console.log('Added new task to the model');
+          },
+          tooltip: this.trans.__('Add new task')
+        })
+      );
+
+      // Add task board content
+      contentPanel.addWidget(new TaskBoardContent(this.trans));
+      this.addWidget(contentPanel);
+      
+      // Store panel reference
+      this._sectionPanels.push(contentPanel);
+    });
+
+    // If no sections, create a default one
+    if (this._sectionPanels.length === 0) {
+      const defaultPanel = new PanelWithToolbar();
+      defaultPanel.addClass('jp-TaskBoard-section');
+      defaultPanel.title.label = 'main';
+
+      // Add new task button to toolbar
+      defaultPanel.toolbar.addItem(
+        'newTask',
+        new ToolbarButton({
+          icon: addIcon,
+          onClick: () => {
+            const currentContent = this._sharedModel.getSource();
+            this._sharedModel.setSource(currentContent + '\n- New task');
+            console.log('Added new task to the model');
+          },
+          tooltip: this.trans.__('Add new task')
+        })
+      );
+
+      // Add task board content
+      defaultPanel.addWidget(new TaskBoardContent(this.trans));
+      this.addWidget(defaultPanel);
+      
+      // Store panel reference
+      this._sectionPanels.push(defaultPanel);
+    }
+  }
+
   protected trans: TranslationBundle;
   private _headerEditor: TaskBoardHeaderEditor;
   private _sharedModel: YFile;
-  // private _model: DocumentRegistry.IModel;
+  private _model: KanbanModel;
+  private _task_header: TaskBoardHeader;
+  private _sectionPanels: PanelWithToolbar[] = [];
 }
 
 /**
diff --git a/src/model.ts b/src/model.ts
index cea280e..4b266c0 100644
--- a/src/model.ts
+++ b/src/model.ts
@@ -46,6 +46,25 @@ export namespace Kanban {
   }
 }
 
+/**
+ * Interface for Kanban structure
+ */
+export interface KanbanHeading {
+  level: number;
+  text: string;
+  line: number;
+}
+
+export interface KanbanSection {
+  title: string;
+  columns: string[];
+}
+
+export interface KanbanStructure {
+  title: string;
+  sections: KanbanSection[];
+}
+
 /**
  * Implementation of Kanban.IModel
  */
@@ -53,6 +72,7 @@ export class KanbanModel extends DocumentModel implements Kanban.IModel {
   private _sharedModel: YFile;
   private _changed = new Signal<this, IChangedArgs<string>>(this);
   private _readOnlyChanged = new Signal<this, IChangedArgs<boolean>>(this);
+  private _structure: KanbanStructure | null = null;
   readonly model_name = 'kanban';
 
   constructor(options: Kanban.IModelOptions = {}) {
@@ -63,6 +83,8 @@ export class KanbanModel extends DocumentModel implements Kanban.IModel {
     this._sharedModel = options.sharedModel ?? new YFile();
     // Connect to the shared model's changed event
     this._sharedModel.changed.connect(this._onSharedModelChanged, this);
+    // 初始化时解析结构
+    this._parseStructure();
   }
 
   get changed(): Signal<this, IChangedArgs<string>> {
@@ -73,6 +95,10 @@ export class KanbanModel extends DocumentModel implements Kanban.IModel {
     return this._readOnlyChanged;
   }
 
+  get structure(): KanbanStructure | null {
+    return this._structure;
+  }
+
   override dispose(): void {
     if (this.isDisposed) {
       return;
@@ -84,19 +110,86 @@ export class KanbanModel extends DocumentModel implements Kanban.IModel {
     super.dispose();
   }
 
+  /**
+   * 解析文档中的标题结构
+   */
+  private _parseStructure(): void {
+    const content = this._sharedModel.getSource();
+    const lines = content.split('\n');
+    const headings: KanbanHeading[] = [];
+    
+    // 解析所有标题
+    lines.forEach((line, index) => {
+      const match = line.match(/^(#{1,6})\s+(.+)$/);
+      if (match) {
+        headings.push({
+          level: match[1].length,
+          text: match[2].trim(),
+          line: index
+        });
+      }
+    });
+
+    if (headings.length === 0) {
+      this._structure = null;
+      return;
+    }
+
+    // 构建看板结构
+    const structure: KanbanStructure = {
+      title: '',
+      sections: []
+    };
+
+    // 第一个一级标题作为看板标题
+    const firstH1 = headings.find(h => h.level === 1);
+    if (firstH1) {
+      structure.title = firstH1.text;
+    }
+
+    // 处理其他一级标题作为分组，其下的二级标题作为列
+    let currentSection: KanbanSection | null = null;
+
+    headings.forEach((heading, index) => {
+      // 跳过第一个一级标题（已作为看板标题）
+      if (heading === firstH1) {
+        return;
+      }
+
+      if (heading.level === 1) {
+        if (currentSection) {
+          structure.sections.push(currentSection);
+        }
+        currentSection = {
+          title: heading.text,
+          columns: []
+        };
+      } else if (heading.level === 2 && currentSection) {
+        currentSection.columns.push(heading.text);
+      }
+    });
+
+    // 添加最后一个分组
+    if (currentSection) {
+      structure.sections.push(currentSection);
+    }
+
+    this._structure = structure;
+  }
+
   /**
    * Handler for shared model changes
    */
   private _onSharedModelChanged(sender: YFile, changes: DocumentChange): void {
-    console.log('Shared model changed:', changes);
     if ((changes as FileChange).sourceChange) {
-      // Emit a change signal with the current source
+      // 重新解析结构
+      this._parseStructure();
+      // 发出变更信号
       this._changed.emit({
         name: 'source',
         oldValue: sender.source,
         newValue: sender.source
       });
-      // Update dirty state
       this.dirty = true;
     }
     if (changes.stateChange) {
